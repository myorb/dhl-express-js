/* tslint:disable */
/* eslint-disable */
/**
 * DHL Express APIs (MyDHL API)
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { SupermodelIoLogisticsExpressCreateShipmentRequest } from '../models';
import { SupermodelIoLogisticsExpressCreateShipmentResponse } from '../models';
import { SupermodelIoLogisticsExpressDocumentImageResponse } from '../models';
import { SupermodelIoLogisticsExpressEPODResponse } from '../models';
import { SupermodelIoLogisticsExpressErrorResponse } from '../models';
import { SupermodelIoLogisticsExpressImageUploadRequest } from '../models';
import { SupermodelIoLogisticsExpressUploadInvoiceDataRequest } from '../models';
/**
 * ShipmentApi - axios parameter creator
 * @export
 */
export const ShipmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Create Shipment The ShipmentRequest Operation will allow you to generate an AWB number and piece IDs, generate a shipping label, transmit manifest shipment detail to DHL, and optionally book a courier for the pickup of a shipment. The key elements in the response of the Shipment Request will be a base64 encoded PDF label and the Shipment and Piece identification numbers, which you can use for tracking on the DHL web site. While the RateRequest and ShipmentRequest services can be used independently, DHL recommends the use of RateRequest to first validate the products available for the shipper/receiver. The global product codes which are output during the RateResponse can be used directly as input into the Shipment Request, as both perform similar validations in terms of service capability. 
         * @summary Create Shipment
         * @param {SupermodelIoLogisticsExpressCreateShipmentRequest} body Details about the shipment to be created
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expApiShipments: async (body: SupermodelIoLogisticsExpressCreateShipmentRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling expApiShipments.');
            }
            const localVarPath = `/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (messageReference !== undefined && messageReference !== null) {
                localVarHeaderParameter['Message-Reference'] = String(messageReference);
            }

            if (messageReferenceDate !== undefined && messageReferenceDate !== null) {
                localVarHeaderParameter['Message-Reference-Date'] = String(messageReferenceDate);
            }

            if (pluginName !== undefined && pluginName !== null) {
                localVarHeaderParameter['Plugin-Name'] = String(pluginName);
            }

            if (pluginVersion !== undefined && pluginVersion !== null) {
                localVarHeaderParameter['Plugin-Version'] = String(pluginVersion);
            }

            if (shippingSystemPlatformName !== undefined && shippingSystemPlatformName !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Name'] = String(shippingSystemPlatformName);
            }

            if (shippingSystemPlatformVersion !== undefined && shippingSystemPlatformVersion !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Version'] = String(shippingSystemPlatformVersion);
            }

            if (webstorePlatformName !== undefined && webstorePlatformName !== null) {
                localVarHeaderParameter['Webstore-Platform-Name'] = String(webstorePlatformName);
            }

            if (webstorePlatformVersion !== undefined && webstorePlatformVersion !== null) {
                localVarHeaderParameter['Webstore-Platform-Version'] = String(webstorePlatformVersion);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The Get Image service can be used to retrieve customer's own uploaded Commercial Invoice, Waybill Document  or supporting documents that uploaded during shipment creation.  
         * @summary Get Image
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} shipperAccountNumber DHL Express customer shipper account number
         * @param {string} typeCode Please provide correct document type.
         * @param {string} pickupYearAndMonth Please provide the pickup&#x27;s date in YYYY-MM format 
         * @param {string} [encodingFormat] Please provide the document image encoding format in pdf or tiff format 
         * @param {boolean} [allInOnePDF] Option to return all the document images in a single PDF file 
         * @param {boolean} [compressedPackage] Option to return all the document images in a compressed package 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expApiShipmentsDocumentimage: async (shipmentTrackingNumber: string, shipperAccountNumber: string, typeCode: string, pickupYearAndMonth: string, encodingFormat?: string, allInOnePDF?: boolean, compressedPackage?: boolean, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentTrackingNumber' is not null or undefined
            if (shipmentTrackingNumber === null || shipmentTrackingNumber === undefined) {
                throw new RequiredError('shipmentTrackingNumber','Required parameter shipmentTrackingNumber was null or undefined when calling expApiShipmentsDocumentimage.');
            }
            // verify required parameter 'shipperAccountNumber' is not null or undefined
            if (shipperAccountNumber === null || shipperAccountNumber === undefined) {
                throw new RequiredError('shipperAccountNumber','Required parameter shipperAccountNumber was null or undefined when calling expApiShipmentsDocumentimage.');
            }
            // verify required parameter 'typeCode' is not null or undefined
            if (typeCode === null || typeCode === undefined) {
                throw new RequiredError('typeCode','Required parameter typeCode was null or undefined when calling expApiShipmentsDocumentimage.');
            }
            // verify required parameter 'pickupYearAndMonth' is not null or undefined
            if (pickupYearAndMonth === null || pickupYearAndMonth === undefined) {
                throw new RequiredError('pickupYearAndMonth','Required parameter pickupYearAndMonth was null or undefined when calling expApiShipmentsDocumentimage.');
            }
            const localVarPath = `/shipments/{shipmentTrackingNumber}/get-image`
                .replace(`{${"shipmentTrackingNumber"}}`, encodeURIComponent(String(shipmentTrackingNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (shipperAccountNumber !== undefined) {
                localVarQueryParameter['shipperAccountNumber'] = shipperAccountNumber;
            }

            if (typeCode !== undefined) {
                localVarQueryParameter['typeCode'] = typeCode;
            }

            if (pickupYearAndMonth !== undefined) {
                localVarQueryParameter['pickupYearAndMonth'] = pickupYearAndMonth;
            }

            if (encodingFormat !== undefined) {
                localVarQueryParameter['encodingFormat'] = encodingFormat;
            }

            if (allInOnePDF !== undefined) {
                localVarQueryParameter['allInOnePDF'] = allInOnePDF;
            }

            if (compressedPackage !== undefined) {
                localVarQueryParameter['compressedPackage'] = compressedPackage;
            }

            if (messageReference !== undefined && messageReference !== null) {
                localVarHeaderParameter['Message-Reference'] = String(messageReference);
            }

            if (messageReferenceDate !== undefined && messageReferenceDate !== null) {
                localVarHeaderParameter['Message-Reference-Date'] = String(messageReferenceDate);
            }

            if (pluginName !== undefined && pluginName !== null) {
                localVarHeaderParameter['Plugin-Name'] = String(pluginName);
            }

            if (pluginVersion !== undefined && pluginVersion !== null) {
                localVarHeaderParameter['Plugin-Version'] = String(pluginVersion);
            }

            if (shippingSystemPlatformName !== undefined && shippingSystemPlatformName !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Name'] = String(shippingSystemPlatformName);
            }

            if (shippingSystemPlatformVersion !== undefined && shippingSystemPlatformVersion !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Version'] = String(shippingSystemPlatformVersion);
            }

            if (webstorePlatformName !== undefined && webstorePlatformName !== null) {
                localVarHeaderParameter['Webstore-Platform-Name'] = String(webstorePlatformName);
            }

            if (webstorePlatformVersion !== undefined && webstorePlatformVersion !== null) {
                localVarHeaderParameter['Webstore-Platform-Version'] = String(webstorePlatformVersion);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments 
         * @summary Electronic Proof of Delivery
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} [shipperAccountNumber] DHL Express customer shipper account number
         * @param {string} [content] 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expApiShipmentsEpod: async (shipmentTrackingNumber: string, shipperAccountNumber?: string, content?: string, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentTrackingNumber' is not null or undefined
            if (shipmentTrackingNumber === null || shipmentTrackingNumber === undefined) {
                throw new RequiredError('shipmentTrackingNumber','Required parameter shipmentTrackingNumber was null or undefined when calling expApiShipmentsEpod.');
            }
            const localVarPath = `/shipments/{shipmentTrackingNumber}/proof-of-delivery`
                .replace(`{${"shipmentTrackingNumber"}}`, encodeURIComponent(String(shipmentTrackingNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (shipperAccountNumber !== undefined) {
                localVarQueryParameter['shipperAccountNumber'] = shipperAccountNumber;
            }

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }

            if (messageReference !== undefined && messageReference !== null) {
                localVarHeaderParameter['Message-Reference'] = String(messageReference);
            }

            if (messageReferenceDate !== undefined && messageReferenceDate !== null) {
                localVarHeaderParameter['Message-Reference-Date'] = String(messageReferenceDate);
            }

            if (pluginName !== undefined && pluginName !== null) {
                localVarHeaderParameter['Plugin-Name'] = String(pluginName);
            }

            if (pluginVersion !== undefined && pluginVersion !== null) {
                localVarHeaderParameter['Plugin-Version'] = String(pluginVersion);
            }

            if (shippingSystemPlatformName !== undefined && shippingSystemPlatformName !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Name'] = String(shippingSystemPlatformName);
            }

            if (shippingSystemPlatformVersion !== undefined && shippingSystemPlatformVersion !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Version'] = String(shippingSystemPlatformVersion);
            }

            if (webstorePlatformName !== undefined && webstorePlatformName !== null) {
                localVarHeaderParameter['Webstore-Platform-Name'] = String(webstorePlatformName);
            }

            if (webstorePlatformVersion !== undefined && webstorePlatformVersion !== null) {
                localVarHeaderParameter['Webstore-Platform-Version'] = String(webstorePlatformVersion);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The update shipment service can be used to upload updated customs documentation for your DHL Express shipment that has not been picked up yet. 
         * @summary Upload updated customs documentation for your DHL Express shipment
         * @param {SupermodelIoLogisticsExpressImageUploadRequest} body Details about the shipment images
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expApiShipmentsImgUpload: async (body: SupermodelIoLogisticsExpressImageUploadRequest, shipmentTrackingNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling expApiShipmentsImgUpload.');
            }
            // verify required parameter 'shipmentTrackingNumber' is not null or undefined
            if (shipmentTrackingNumber === null || shipmentTrackingNumber === undefined) {
                throw new RequiredError('shipmentTrackingNumber','Required parameter shipmentTrackingNumber was null or undefined when calling expApiShipmentsImgUpload.');
            }
            const localVarPath = `/shipments/{shipmentTrackingNumber}/upload-image`
                .replace(`{${"shipmentTrackingNumber"}}`, encodeURIComponent(String(shipmentTrackingNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Upload Invoice Data with Shipment ID The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.  Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that \"PM\" service code is provided in MyDHL API Create Shipment request. \"PM\" service code is not enabled by  default for the customers, and needs to be enabled upon request.  When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value \"CU\" and Shipper Account Number.   These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data.  DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data. 
         * @summary Upload Commercial Invoice data for your DHL Express shipment
         * @param {SupermodelIoLogisticsExpressUploadInvoiceDataRequest} body Details about the invoice data
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expApiShipmentsInvoiceDataAwb: async (body: SupermodelIoLogisticsExpressUploadInvoiceDataRequest, shipmentTrackingNumber: string, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling expApiShipmentsInvoiceDataAwb.');
            }
            // verify required parameter 'shipmentTrackingNumber' is not null or undefined
            if (shipmentTrackingNumber === null || shipmentTrackingNumber === undefined) {
                throw new RequiredError('shipmentTrackingNumber','Required parameter shipmentTrackingNumber was null or undefined when calling expApiShipmentsInvoiceDataAwb.');
            }
            const localVarPath = `/shipments/{shipmentTrackingNumber}/upload-invoice-data`
                .replace(`{${"shipmentTrackingNumber"}}`, encodeURIComponent(String(shipmentTrackingNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (messageReference !== undefined && messageReference !== null) {
                localVarHeaderParameter['Message-Reference'] = String(messageReference);
            }

            if (messageReferenceDate !== undefined && messageReferenceDate !== null) {
                localVarHeaderParameter['Message-Reference-Date'] = String(messageReferenceDate);
            }

            if (pluginName !== undefined && pluginName !== null) {
                localVarHeaderParameter['Plugin-Name'] = String(pluginName);
            }

            if (pluginVersion !== undefined && pluginVersion !== null) {
                localVarHeaderParameter['Plugin-Version'] = String(pluginVersion);
            }

            if (shippingSystemPlatformName !== undefined && shippingSystemPlatformName !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Name'] = String(shippingSystemPlatformName);
            }

            if (shippingSystemPlatformVersion !== undefined && shippingSystemPlatformVersion !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Version'] = String(shippingSystemPlatformVersion);
            }

            if (webstorePlatformName !== undefined && webstorePlatformName !== null) {
                localVarHeaderParameter['Webstore-Platform-Name'] = String(webstorePlatformName);
            }

            if (webstorePlatformVersion !== undefined && webstorePlatformVersion !== null) {
                localVarHeaderParameter['Webstore-Platform-Version'] = String(webstorePlatformVersion);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentApi - functional programming interface
 * @export
 */
export const ShipmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ## Create Shipment The ShipmentRequest Operation will allow you to generate an AWB number and piece IDs, generate a shipping label, transmit manifest shipment detail to DHL, and optionally book a courier for the pickup of a shipment. The key elements in the response of the Shipment Request will be a base64 encoded PDF label and the Shipment and Piece identification numbers, which you can use for tracking on the DHL web site. While the RateRequest and ShipmentRequest services can be used independently, DHL recommends the use of RateRequest to first validate the products available for the shipper/receiver. The global product codes which are output during the RateResponse can be used directly as input into the Shipment Request, as both perform similar validations in terms of service capability. 
         * @summary Create Shipment
         * @param {SupermodelIoLogisticsExpressCreateShipmentRequest} body Details about the shipment to be created
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipments(body: SupermodelIoLogisticsExpressCreateShipmentRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SupermodelIoLogisticsExpressCreateShipmentResponse>>> {
            const localVarAxiosArgs = await ShipmentApiAxiosParamCreator(configuration).expApiShipments(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The Get Image service can be used to retrieve customer's own uploaded Commercial Invoice, Waybill Document  or supporting documents that uploaded during shipment creation.  
         * @summary Get Image
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} shipperAccountNumber DHL Express customer shipper account number
         * @param {string} typeCode Please provide correct document type.
         * @param {string} pickupYearAndMonth Please provide the pickup&#x27;s date in YYYY-MM format 
         * @param {string} [encodingFormat] Please provide the document image encoding format in pdf or tiff format 
         * @param {boolean} [allInOnePDF] Option to return all the document images in a single PDF file 
         * @param {boolean} [compressedPackage] Option to return all the document images in a compressed package 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipmentsDocumentimage(shipmentTrackingNumber: string, shipperAccountNumber: string, typeCode: string, pickupYearAndMonth: string, encodingFormat?: string, allInOnePDF?: boolean, compressedPackage?: boolean, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SupermodelIoLogisticsExpressDocumentImageResponse>>> {
            const localVarAxiosArgs = await ShipmentApiAxiosParamCreator(configuration).expApiShipmentsDocumentimage(shipmentTrackingNumber, shipperAccountNumber, typeCode, pickupYearAndMonth, encodingFormat, allInOnePDF, compressedPackage, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments 
         * @summary Electronic Proof of Delivery
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} [shipperAccountNumber] DHL Express customer shipper account number
         * @param {string} [content] 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipmentsEpod(shipmentTrackingNumber: string, shipperAccountNumber?: string, content?: string, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SupermodelIoLogisticsExpressEPODResponse>>> {
            const localVarAxiosArgs = await ShipmentApiAxiosParamCreator(configuration).expApiShipmentsEpod(shipmentTrackingNumber, shipperAccountNumber, content, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The update shipment service can be used to upload updated customs documentation for your DHL Express shipment that has not been picked up yet. 
         * @summary Upload updated customs documentation for your DHL Express shipment
         * @param {SupermodelIoLogisticsExpressImageUploadRequest} body Details about the shipment images
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipmentsImgUpload(body: SupermodelIoLogisticsExpressImageUploadRequest, shipmentTrackingNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ShipmentApiAxiosParamCreator(configuration).expApiShipmentsImgUpload(body, shipmentTrackingNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ## Upload Invoice Data with Shipment ID The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.  Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that \"PM\" service code is provided in MyDHL API Create Shipment request. \"PM\" service code is not enabled by  default for the customers, and needs to be enabled upon request.  When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value \"CU\" and Shipper Account Number.   These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data.  DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data. 
         * @summary Upload Commercial Invoice data for your DHL Express shipment
         * @param {SupermodelIoLogisticsExpressUploadInvoiceDataRequest} body Details about the invoice data
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipmentsInvoiceDataAwb(body: SupermodelIoLogisticsExpressUploadInvoiceDataRequest, shipmentTrackingNumber: string, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ShipmentApiAxiosParamCreator(configuration).expApiShipmentsInvoiceDataAwb(body, shipmentTrackingNumber, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ShipmentApi - factory interface
 * @export
 */
export const ShipmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * ## Create Shipment The ShipmentRequest Operation will allow you to generate an AWB number and piece IDs, generate a shipping label, transmit manifest shipment detail to DHL, and optionally book a courier for the pickup of a shipment. The key elements in the response of the Shipment Request will be a base64 encoded PDF label and the Shipment and Piece identification numbers, which you can use for tracking on the DHL web site. While the RateRequest and ShipmentRequest services can be used independently, DHL recommends the use of RateRequest to first validate the products available for the shipper/receiver. The global product codes which are output during the RateResponse can be used directly as input into the Shipment Request, as both perform similar validations in terms of service capability. 
         * @summary Create Shipment
         * @param {SupermodelIoLogisticsExpressCreateShipmentRequest} body Details about the shipment to be created
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipments(body: SupermodelIoLogisticsExpressCreateShipmentRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SupermodelIoLogisticsExpressCreateShipmentResponse>> {
            return ShipmentApiFp(configuration).expApiShipments(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * The Get Image service can be used to retrieve customer's own uploaded Commercial Invoice, Waybill Document  or supporting documents that uploaded during shipment creation.  
         * @summary Get Image
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} shipperAccountNumber DHL Express customer shipper account number
         * @param {string} typeCode Please provide correct document type.
         * @param {string} pickupYearAndMonth Please provide the pickup&#x27;s date in YYYY-MM format 
         * @param {string} [encodingFormat] Please provide the document image encoding format in pdf or tiff format 
         * @param {boolean} [allInOnePDF] Option to return all the document images in a single PDF file 
         * @param {boolean} [compressedPackage] Option to return all the document images in a compressed package 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipmentsDocumentimage(shipmentTrackingNumber: string, shipperAccountNumber: string, typeCode: string, pickupYearAndMonth: string, encodingFormat?: string, allInOnePDF?: boolean, compressedPackage?: boolean, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SupermodelIoLogisticsExpressDocumentImageResponse>> {
            return ShipmentApiFp(configuration).expApiShipmentsDocumentimage(shipmentTrackingNumber, shipperAccountNumber, typeCode, pickupYearAndMonth, encodingFormat, allInOnePDF, compressedPackage, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments 
         * @summary Electronic Proof of Delivery
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} [shipperAccountNumber] DHL Express customer shipper account number
         * @param {string} [content] 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipmentsEpod(shipmentTrackingNumber: string, shipperAccountNumber?: string, content?: string, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SupermodelIoLogisticsExpressEPODResponse>> {
            return ShipmentApiFp(configuration).expApiShipmentsEpod(shipmentTrackingNumber, shipperAccountNumber, content, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * The update shipment service can be used to upload updated customs documentation for your DHL Express shipment that has not been picked up yet. 
         * @summary Upload updated customs documentation for your DHL Express shipment
         * @param {SupermodelIoLogisticsExpressImageUploadRequest} body Details about the shipment images
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipmentsImgUpload(body: SupermodelIoLogisticsExpressImageUploadRequest, shipmentTrackingNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ShipmentApiFp(configuration).expApiShipmentsImgUpload(body, shipmentTrackingNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Upload Invoice Data with Shipment ID The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.  Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that \"PM\" service code is provided in MyDHL API Create Shipment request. \"PM\" service code is not enabled by  default for the customers, and needs to be enabled upon request.  When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value \"CU\" and Shipper Account Number.   These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data.  DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data. 
         * @summary Upload Commercial Invoice data for your DHL Express shipment
         * @param {SupermodelIoLogisticsExpressUploadInvoiceDataRequest} body Details about the invoice data
         * @param {string} shipmentTrackingNumber DHL Express shipment identification number
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiShipmentsInvoiceDataAwb(body: SupermodelIoLogisticsExpressUploadInvoiceDataRequest, shipmentTrackingNumber: string, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ShipmentApiFp(configuration).expApiShipmentsInvoiceDataAwb(body, shipmentTrackingNumber, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentApi - object-oriented interface
 * @export
 * @class ShipmentApi
 * @extends {BaseAPI}
 */
export class ShipmentApi extends BaseAPI {
    /**
     * ## Create Shipment The ShipmentRequest Operation will allow you to generate an AWB number and piece IDs, generate a shipping label, transmit manifest shipment detail to DHL, and optionally book a courier for the pickup of a shipment. The key elements in the response of the Shipment Request will be a base64 encoded PDF label and the Shipment and Piece identification numbers, which you can use for tracking on the DHL web site. While the RateRequest and ShipmentRequest services can be used independently, DHL recommends the use of RateRequest to first validate the products available for the shipper/receiver. The global product codes which are output during the RateResponse can be used directly as input into the Shipment Request, as both perform similar validations in terms of service capability. 
     * @summary Create Shipment
     * @param {SupermodelIoLogisticsExpressCreateShipmentRequest} body Details about the shipment to be created
     * @param {string} [messageReference] Please provide message reference 
     * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
     * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public async expApiShipments(body: SupermodelIoLogisticsExpressCreateShipmentRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SupermodelIoLogisticsExpressCreateShipmentResponse>> {
        return ShipmentApiFp(this.configuration).expApiShipments(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The Get Image service can be used to retrieve customer's own uploaded Commercial Invoice, Waybill Document  or supporting documents that uploaded during shipment creation.  
     * @summary Get Image
     * @param {string} shipmentTrackingNumber DHL Express shipment identification number
     * @param {string} shipperAccountNumber DHL Express customer shipper account number
     * @param {string} typeCode Please provide correct document type.
     * @param {string} pickupYearAndMonth Please provide the pickup&#x27;s date in YYYY-MM format 
     * @param {string} [encodingFormat] Please provide the document image encoding format in pdf or tiff format 
     * @param {boolean} [allInOnePDF] Option to return all the document images in a single PDF file 
     * @param {boolean} [compressedPackage] Option to return all the document images in a compressed package 
     * @param {string} [messageReference] Please provide message reference 
     * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
     * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public async expApiShipmentsDocumentimage(shipmentTrackingNumber: string, shipperAccountNumber: string, typeCode: string, pickupYearAndMonth: string, encodingFormat?: string, allInOnePDF?: boolean, compressedPackage?: boolean, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SupermodelIoLogisticsExpressDocumentImageResponse>> {
        return ShipmentApiFp(this.configuration).expApiShipmentsDocumentimage(shipmentTrackingNumber, shipperAccountNumber, typeCode, pickupYearAndMonth, encodingFormat, allInOnePDF, compressedPackage, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments 
     * @summary Electronic Proof of Delivery
     * @param {string} shipmentTrackingNumber DHL Express shipment identification number
     * @param {string} [shipperAccountNumber] DHL Express customer shipper account number
     * @param {string} [content] 
     * @param {string} [messageReference] Please provide message reference 
     * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
     * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public async expApiShipmentsEpod(shipmentTrackingNumber: string, shipperAccountNumber?: string, content?: string, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SupermodelIoLogisticsExpressEPODResponse>> {
        return ShipmentApiFp(this.configuration).expApiShipmentsEpod(shipmentTrackingNumber, shipperAccountNumber, content, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The update shipment service can be used to upload updated customs documentation for your DHL Express shipment that has not been picked up yet. 
     * @summary Upload updated customs documentation for your DHL Express shipment
     * @param {SupermodelIoLogisticsExpressImageUploadRequest} body Details about the shipment images
     * @param {string} shipmentTrackingNumber DHL Express shipment identification number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public async expApiShipmentsImgUpload(body: SupermodelIoLogisticsExpressImageUploadRequest, shipmentTrackingNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ShipmentApiFp(this.configuration).expApiShipmentsImgUpload(body, shipmentTrackingNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ## Upload Invoice Data with Shipment ID The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.  Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that \"PM\" service code is provided in MyDHL API Create Shipment request. \"PM\" service code is not enabled by  default for the customers, and needs to be enabled upon request.  When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value \"CU\" and Shipper Account Number.   These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data.  DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data. 
     * @summary Upload Commercial Invoice data for your DHL Express shipment
     * @param {SupermodelIoLogisticsExpressUploadInvoiceDataRequest} body Details about the invoice data
     * @param {string} shipmentTrackingNumber DHL Express shipment identification number
     * @param {string} [messageReference] Please provide message reference 
     * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
     * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public async expApiShipmentsInvoiceDataAwb(body: SupermodelIoLogisticsExpressUploadInvoiceDataRequest, shipmentTrackingNumber: string, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ShipmentApiFp(this.configuration).expApiShipmentsInvoiceDataAwb(body, shipmentTrackingNumber, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(this.axios, this.basePath));
    }
}
