/* tslint:disable */
/* eslint-disable */
/**
 * DHL Express APIs (MyDHL API)
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { SupermodelIoLogisticsExpressErrorResponse } from '../models';
import { SupermodelIoLogisticsExpressLandedCostRequest } from '../models';
import { SupermodelIoLogisticsExpressRateRequest } from '../models';
import { SupermodelIoLogisticsExpressRates } from '../models';
/**
 * RatingApi - axios parameter creator
 * @export
 */
export const RatingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Landed Cost section allows further information around products being sold to be provided. In return the duty, tax and shipping charges are calculated in real time and provides transparency about any extra costs the buyer may have to pay before they reach them. 
         * @summary Landed Cost
         * @param {SupermodelIoLogisticsExpressLandedCostRequest} body Details about the requested shipment
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expApiLandedCost: async (body: SupermodelIoLogisticsExpressLandedCostRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling expApiLandedCost.');
            }
            const localVarPath = `/landed-cost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (messageReference !== undefined && messageReference !== null) {
                localVarHeaderParameter['Message-Reference'] = String(messageReference);
            }

            if (messageReferenceDate !== undefined && messageReferenceDate !== null) {
                localVarHeaderParameter['Message-Reference-Date'] = String(messageReferenceDate);
            }

            if (pluginName !== undefined && pluginName !== null) {
                localVarHeaderParameter['Plugin-Name'] = String(pluginName);
            }

            if (pluginVersion !== undefined && pluginVersion !== null) {
                localVarHeaderParameter['Plugin-Version'] = String(pluginVersion);
            }

            if (shippingSystemPlatformName !== undefined && shippingSystemPlatformName !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Name'] = String(shippingSystemPlatformName);
            }

            if (shippingSystemPlatformVersion !== undefined && shippingSystemPlatformVersion !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Version'] = String(shippingSystemPlatformVersion);
            }

            if (webstorePlatformName !== undefined && webstorePlatformName !== null) {
                localVarHeaderParameter['Webstore-Platform-Name'] = String(webstorePlatformName);
            }

            if (webstorePlatformVersion !== undefined && webstorePlatformVersion !== null) {
                localVarHeaderParameter['Webstore-Platform-Version'] = String(webstorePlatformVersion);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable) 
         * @summary Retrieve Rates for a one piece Shipment
         * @param {string} accountNumber DHL Express customer account number
         * @param {string} originCountryCode A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code
         * @param {string} originCityName Text specifying the city name
         * @param {string} destinationCountryCode A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code
         * @param {string} destinationCityName Text specifying the city name
         * @param {number} weight Gross weight of the shipment including packaging.
         * @param {number} length Total length of the shipment including packaging.
         * @param {number} width Total width of the shipment including packaging.
         * @param {number} height Total height of the shipment including packaging.
         * @param {string} plannedShippingDate Timestamp represents the date you plan to ship your prospected shipment 
         * @param {boolean} isCustomsDeclarable 
         * @param {string} unitOfMeasurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. 
         * @param {string} [originPostalCode] Text specifying the postal code for an address. https://gs1.org/voc/postalCode
         * @param {string} [destinationPostalCode] Text specifying the postal code for an address. https://gs1.org/voc/postalCode
         * @param {boolean} [nextBusinessDay] When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expApiRates: async (accountNumber: string, originCountryCode: string, originCityName: string, destinationCountryCode: string, destinationCityName: string, weight: number, length: number, width: number, height: number, plannedShippingDate: string, isCustomsDeclarable: boolean, unitOfMeasurement: string, originPostalCode?: string, destinationPostalCode?: string, nextBusinessDay?: boolean, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountNumber' is not null or undefined
            if (accountNumber === null || accountNumber === undefined) {
                throw new RequiredError('accountNumber','Required parameter accountNumber was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'originCountryCode' is not null or undefined
            if (originCountryCode === null || originCountryCode === undefined) {
                throw new RequiredError('originCountryCode','Required parameter originCountryCode was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'originCityName' is not null or undefined
            if (originCityName === null || originCityName === undefined) {
                throw new RequiredError('originCityName','Required parameter originCityName was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'destinationCountryCode' is not null or undefined
            if (destinationCountryCode === null || destinationCountryCode === undefined) {
                throw new RequiredError('destinationCountryCode','Required parameter destinationCountryCode was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'destinationCityName' is not null or undefined
            if (destinationCityName === null || destinationCityName === undefined) {
                throw new RequiredError('destinationCityName','Required parameter destinationCityName was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'weight' is not null or undefined
            if (weight === null || weight === undefined) {
                throw new RequiredError('weight','Required parameter weight was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'length' is not null or undefined
            if (length === null || length === undefined) {
                throw new RequiredError('length','Required parameter length was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'width' is not null or undefined
            if (width === null || width === undefined) {
                throw new RequiredError('width','Required parameter width was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'plannedShippingDate' is not null or undefined
            if (plannedShippingDate === null || plannedShippingDate === undefined) {
                throw new RequiredError('plannedShippingDate','Required parameter plannedShippingDate was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'isCustomsDeclarable' is not null or undefined
            if (isCustomsDeclarable === null || isCustomsDeclarable === undefined) {
                throw new RequiredError('isCustomsDeclarable','Required parameter isCustomsDeclarable was null or undefined when calling expApiRates.');
            }
            // verify required parameter 'unitOfMeasurement' is not null or undefined
            if (unitOfMeasurement === null || unitOfMeasurement === undefined) {
                throw new RequiredError('unitOfMeasurement','Required parameter unitOfMeasurement was null or undefined when calling expApiRates.');
            }
            const localVarPath = `/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (accountNumber !== undefined) {
                localVarQueryParameter['accountNumber'] = accountNumber;
            }

            if (originCountryCode !== undefined) {
                localVarQueryParameter['originCountryCode'] = originCountryCode;
            }

            if (originPostalCode !== undefined) {
                localVarQueryParameter['originPostalCode'] = originPostalCode;
            }

            if (originCityName !== undefined) {
                localVarQueryParameter['originCityName'] = originCityName;
            }

            if (destinationCountryCode !== undefined) {
                localVarQueryParameter['destinationCountryCode'] = destinationCountryCode;
            }

            if (destinationPostalCode !== undefined) {
                localVarQueryParameter['destinationPostalCode'] = destinationPostalCode;
            }

            if (destinationCityName !== undefined) {
                localVarQueryParameter['destinationCityName'] = destinationCityName;
            }

            if (weight !== undefined) {
                localVarQueryParameter['weight'] = weight;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (plannedShippingDate !== undefined) {
                localVarQueryParameter['plannedShippingDate'] = plannedShippingDate;
            }

            if (isCustomsDeclarable !== undefined) {
                localVarQueryParameter['isCustomsDeclarable'] = isCustomsDeclarable;
            }

            if (unitOfMeasurement !== undefined) {
                localVarQueryParameter['unitOfMeasurement'] = unitOfMeasurement;
            }

            if (nextBusinessDay !== undefined) {
                localVarQueryParameter['nextBusinessDay'] = nextBusinessDay;
            }

            if (messageReference !== undefined && messageReference !== null) {
                localVarHeaderParameter['Message-Reference'] = String(messageReference);
            }

            if (messageReferenceDate !== undefined && messageReferenceDate !== null) {
                localVarHeaderParameter['Message-Reference-Date'] = String(messageReferenceDate);
            }

            if (pluginName !== undefined && pluginName !== null) {
                localVarHeaderParameter['Plugin-Name'] = String(pluginName);
            }

            if (pluginVersion !== undefined && pluginVersion !== null) {
                localVarHeaderParameter['Plugin-Version'] = String(pluginVersion);
            }

            if (shippingSystemPlatformName !== undefined && shippingSystemPlatformName !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Name'] = String(shippingSystemPlatformName);
            }

            if (shippingSystemPlatformVersion !== undefined && shippingSystemPlatformVersion !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Version'] = String(shippingSystemPlatformVersion);
            }

            if (webstorePlatformName !== undefined && webstorePlatformName !== null) {
                localVarHeaderParameter['Webstore-Platform-Name'] = String(webstorePlatformName);
            }

            if (webstorePlatformVersion !== undefined && webstorePlatformVersion !== null) {
                localVarHeaderParameter['Webstore-Platform-Version'] = String(webstorePlatformVersion);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable) 
         * @summary Retrieve Rates for Multi-piece Shipments
         * @param {SupermodelIoLogisticsExpressRateRequest} body Details about the requested shipment
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expApiRatesMany: async (body: SupermodelIoLogisticsExpressRateRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling expApiRatesMany.');
            }
            const localVarPath = `/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (messageReference !== undefined && messageReference !== null) {
                localVarHeaderParameter['Message-Reference'] = String(messageReference);
            }

            if (messageReferenceDate !== undefined && messageReferenceDate !== null) {
                localVarHeaderParameter['Message-Reference-Date'] = String(messageReferenceDate);
            }

            if (pluginName !== undefined && pluginName !== null) {
                localVarHeaderParameter['Plugin-Name'] = String(pluginName);
            }

            if (pluginVersion !== undefined && pluginVersion !== null) {
                localVarHeaderParameter['Plugin-Version'] = String(pluginVersion);
            }

            if (shippingSystemPlatformName !== undefined && shippingSystemPlatformName !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Name'] = String(shippingSystemPlatformName);
            }

            if (shippingSystemPlatformVersion !== undefined && shippingSystemPlatformVersion !== null) {
                localVarHeaderParameter['Shipping-System-Platform-Version'] = String(shippingSystemPlatformVersion);
            }

            if (webstorePlatformName !== undefined && webstorePlatformName !== null) {
                localVarHeaderParameter['Webstore-Platform-Name'] = String(webstorePlatformName);
            }

            if (webstorePlatformVersion !== undefined && webstorePlatformVersion !== null) {
                localVarHeaderParameter['Webstore-Platform-Version'] = String(webstorePlatformVersion);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatingApi - functional programming interface
 * @export
 */
export const RatingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The Landed Cost section allows further information around products being sold to be provided. In return the duty, tax and shipping charges are calculated in real time and provides transparency about any extra costs the buyer may have to pay before they reach them. 
         * @summary Landed Cost
         * @param {SupermodelIoLogisticsExpressLandedCostRequest} body Details about the requested shipment
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiLandedCost(body: SupermodelIoLogisticsExpressLandedCostRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>>> {
            const localVarAxiosArgs = await RatingApiAxiosParamCreator(configuration).expApiLandedCost(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable) 
         * @summary Retrieve Rates for a one piece Shipment
         * @param {string} accountNumber DHL Express customer account number
         * @param {string} originCountryCode A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code
         * @param {string} originCityName Text specifying the city name
         * @param {string} destinationCountryCode A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code
         * @param {string} destinationCityName Text specifying the city name
         * @param {number} weight Gross weight of the shipment including packaging.
         * @param {number} length Total length of the shipment including packaging.
         * @param {number} width Total width of the shipment including packaging.
         * @param {number} height Total height of the shipment including packaging.
         * @param {string} plannedShippingDate Timestamp represents the date you plan to ship your prospected shipment 
         * @param {boolean} isCustomsDeclarable 
         * @param {string} unitOfMeasurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. 
         * @param {string} [originPostalCode] Text specifying the postal code for an address. https://gs1.org/voc/postalCode
         * @param {string} [destinationPostalCode] Text specifying the postal code for an address. https://gs1.org/voc/postalCode
         * @param {boolean} [nextBusinessDay] When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiRates(accountNumber: string, originCountryCode: string, originCityName: string, destinationCountryCode: string, destinationCityName: string, weight: number, length: number, width: number, height: number, plannedShippingDate: string, isCustomsDeclarable: boolean, unitOfMeasurement: string, originPostalCode?: string, destinationPostalCode?: string, nextBusinessDay?: boolean, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>>> {
            const localVarAxiosArgs = await RatingApiAxiosParamCreator(configuration).expApiRates(accountNumber, originCountryCode, originCityName, destinationCountryCode, destinationCityName, weight, length, width, height, plannedShippingDate, isCustomsDeclarable, unitOfMeasurement, originPostalCode, destinationPostalCode, nextBusinessDay, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable) 
         * @summary Retrieve Rates for Multi-piece Shipments
         * @param {SupermodelIoLogisticsExpressRateRequest} body Details about the requested shipment
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiRatesMany(body: SupermodelIoLogisticsExpressRateRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>>> {
            const localVarAxiosArgs = await RatingApiAxiosParamCreator(configuration).expApiRatesMany(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RatingApi - factory interface
 * @export
 */
export const RatingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * The Landed Cost section allows further information around products being sold to be provided. In return the duty, tax and shipping charges are calculated in real time and provides transparency about any extra costs the buyer may have to pay before they reach them. 
         * @summary Landed Cost
         * @param {SupermodelIoLogisticsExpressLandedCostRequest} body Details about the requested shipment
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiLandedCost(body: SupermodelIoLogisticsExpressLandedCostRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>> {
            return RatingApiFp(configuration).expApiLandedCost(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable) 
         * @summary Retrieve Rates for a one piece Shipment
         * @param {string} accountNumber DHL Express customer account number
         * @param {string} originCountryCode A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code
         * @param {string} originCityName Text specifying the city name
         * @param {string} destinationCountryCode A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code
         * @param {string} destinationCityName Text specifying the city name
         * @param {number} weight Gross weight of the shipment including packaging.
         * @param {number} length Total length of the shipment including packaging.
         * @param {number} width Total width of the shipment including packaging.
         * @param {number} height Total height of the shipment including packaging.
         * @param {string} plannedShippingDate Timestamp represents the date you plan to ship your prospected shipment 
         * @param {boolean} isCustomsDeclarable 
         * @param {string} unitOfMeasurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. 
         * @param {string} [originPostalCode] Text specifying the postal code for an address. https://gs1.org/voc/postalCode
         * @param {string} [destinationPostalCode] Text specifying the postal code for an address. https://gs1.org/voc/postalCode
         * @param {boolean} [nextBusinessDay] When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned 
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiRates(accountNumber: string, originCountryCode: string, originCityName: string, destinationCountryCode: string, destinationCityName: string, weight: number, length: number, width: number, height: number, plannedShippingDate: string, isCustomsDeclarable: boolean, unitOfMeasurement: string, originPostalCode?: string, destinationPostalCode?: string, nextBusinessDay?: boolean, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>> {
            return RatingApiFp(configuration).expApiRates(accountNumber, originCountryCode, originCityName, destinationCountryCode, destinationCityName, weight, length, width, height, plannedShippingDate, isCustomsDeclarable, unitOfMeasurement, originPostalCode, destinationPostalCode, nextBusinessDay, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable) 
         * @summary Retrieve Rates for Multi-piece Shipments
         * @param {SupermodelIoLogisticsExpressRateRequest} body Details about the requested shipment
         * @param {string} [messageReference] Please provide message reference 
         * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
         * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
         * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
         * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
         * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expApiRatesMany(body: SupermodelIoLogisticsExpressRateRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>> {
            return RatingApiFp(configuration).expApiRatesMany(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RatingApi - object-oriented interface
 * @export
 * @class RatingApi
 * @extends {BaseAPI}
 */
export class RatingApi extends BaseAPI {
    /**
     * The Landed Cost section allows further information around products being sold to be provided. In return the duty, tax and shipping charges are calculated in real time and provides transparency about any extra costs the buyer may have to pay before they reach them. 
     * @summary Landed Cost
     * @param {SupermodelIoLogisticsExpressLandedCostRequest} body Details about the requested shipment
     * @param {string} [messageReference] Please provide message reference 
     * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
     * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingApi
     */
    public async expApiLandedCost(body: SupermodelIoLogisticsExpressLandedCostRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>> {
        return RatingApiFp(this.configuration).expApiLandedCost(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable) 
     * @summary Retrieve Rates for a one piece Shipment
     * @param {string} accountNumber DHL Express customer account number
     * @param {string} originCountryCode A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code
     * @param {string} originCityName Text specifying the city name
     * @param {string} destinationCountryCode A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code
     * @param {string} destinationCityName Text specifying the city name
     * @param {number} weight Gross weight of the shipment including packaging.
     * @param {number} length Total length of the shipment including packaging.
     * @param {number} width Total width of the shipment including packaging.
     * @param {number} height Total height of the shipment including packaging.
     * @param {string} plannedShippingDate Timestamp represents the date you plan to ship your prospected shipment 
     * @param {boolean} isCustomsDeclarable 
     * @param {string} unitOfMeasurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. 
     * @param {string} [originPostalCode] Text specifying the postal code for an address. https://gs1.org/voc/postalCode
     * @param {string} [destinationPostalCode] Text specifying the postal code for an address. https://gs1.org/voc/postalCode
     * @param {boolean} [nextBusinessDay] When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned 
     * @param {string} [messageReference] Please provide message reference 
     * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
     * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingApi
     */
    public async expApiRates(accountNumber: string, originCountryCode: string, originCityName: string, destinationCountryCode: string, destinationCityName: string, weight: number, length: number, width: number, height: number, plannedShippingDate: string, isCustomsDeclarable: boolean, unitOfMeasurement: string, originPostalCode?: string, destinationPostalCode?: string, nextBusinessDay?: boolean, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>> {
        return RatingApiFp(this.configuration).expApiRates(accountNumber, originCountryCode, originCityName, destinationCountryCode, destinationCityName, weight, length, width, height, plannedShippingDate, isCustomsDeclarable, unitOfMeasurement, originPostalCode, destinationPostalCode, nextBusinessDay, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable) 
     * @summary Retrieve Rates for Multi-piece Shipments
     * @param {SupermodelIoLogisticsExpressRateRequest} body Details about the requested shipment
     * @param {string} [messageReference] Please provide message reference 
     * @param {string} [messageReferenceDate] Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param {string} [pluginName] Please provide name of the plugin (applicable to 3PV only) 
     * @param {string} [pluginVersion] Please provide version of the plugin (applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformName] Please provide name of the shipping platform(applicable to 3PV only) 
     * @param {string} [shippingSystemPlatformVersion] Please provide version of the shipping platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformName] Please provide name of the webstore platform (applicable to 3PV only) 
     * @param {string} [webstorePlatformVersion] Please provide version of the webstore platform (applicable to 3PV only) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingApi
     */
    public async expApiRatesMany(body: SupermodelIoLogisticsExpressRateRequest, messageReference?: string, messageReferenceDate?: string, pluginName?: string, pluginVersion?: string, shippingSystemPlatformName?: string, shippingSystemPlatformVersion?: string, webstorePlatformName?: string, webstorePlatformVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SupermodelIoLogisticsExpressRates>> {
        return RatingApiFp(this.configuration).expApiRatesMany(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, options).then((request) => request(this.axios, this.basePath));
    }
}
